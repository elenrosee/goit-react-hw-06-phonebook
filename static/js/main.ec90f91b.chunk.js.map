{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactsList/ContactsList.module.scss","components/Filter/Filter.module.scss","components/Notification/Notification.module.scss","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactsList/ContactsList.js","components/Notification/Notification.js","App.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","e","preventDefault","id","uuidv4","className","styles","contact_form","input_name","type","pattern","title","onChange","required","button","Filter","form","ContactsList","contacts","onDeleteContact","contact_list","map","contact_item","onClick","Notification","message","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","data","find","toLowerCase","alert","prevState","length","currentTarget","normalizedFilter","contact","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec90f91b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"ContactForm_contact_form__2qj8b\",\"input_name\":\"ContactForm_input_name__JCTER\",\"button\":\"ContactForm_button__1007G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactsList_contact_list__252_C\",\"contact_item\":\"ContactsList_contact_item__sU5hE\",\"button\":\"ContactsList_button__2Uuuy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__30cdg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__2vOHA\"};","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport styles from \"./ContactForm.module.scss\";\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit({ name, number, id: uuidv4() });\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.contact_form}>\n      <label>\n        <p className={styles.input_name}>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label>\n        <p className={styles.input_name}>Number</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value={number}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <button type=\"submit\" className={styles.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.scss\";\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <form className={styles.form}>\n      <label>\n        <p>Find contacts by name</p>\n        <input type=\"text\" value={value} onChange={onChange} />\n      </label>\n    </form>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport styles from \"./ContactsList.module.scss\";\n\nexport default function ContactsList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={styles.contact_list}>\n      {contacts.map(({ name, number, id }) => (\n        <li key={id} className={styles.contact_item}>\n          <span>\n            {name}: {number}\n          </span>\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className={styles.button}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport styles from \"./Notification.module.scss\";\n\nexport default function Notification({ message }) {\n  return <h3 className={styles.title}>{message}</h3>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useState, useEffect, Fragment } from \"react\";\n\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactsList from \"./components/ContactsList\";\nimport Notification from \"./components/Notification\";\n\nexport default function App() {\n  const [contacts, setContacts] = useState(\n    () => JSON.parse(window.localStorage.getItem(\"contacts\")) ?? []\n  );\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandler = (data) => {\n    contacts.find(({ name }) => name.toLowerCase() === data.name.toLowerCase())\n      ? alert(`${data.name} is already in contacts`)\n      : setContacts((prevState) => [...[data], ...prevState]);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteContact = (contactId) => {\n    setContacts((prevState) =>\n      prevState.filter((contact) => contact.id !== contactId)\n    );\n  };\n\n  return (\n    <Fragment>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={formSubmitHandler} />\n      <h2>Contacts</h2>\n      {contacts.length > 0 ? (\n        <Fragment>\n          <Filter\n            value={filter}\n            onChange={(e) => setFilter(e.currentTarget.value)}\n          />\n          <ContactsList\n            contacts={getVisibleContacts()}\n            onDeleteContact={deleteContact}\n          />\n        </Fragment>\n      ) : (\n        <Notification message=\"Empty contacts list\" />\n      )}\n    </Fragment>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.scss\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}