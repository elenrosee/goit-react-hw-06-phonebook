{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactsList/ContactsList.module.scss","components/Filter/Filter.module.scss","components/redux/FormInput/contacts-types.js","components/redux/FormInput/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactsList/ContactsList.js","App.js","components/redux/FormInput/contacts-reducer.js","components/redux/store.js","index.js"],"names":["module","exports","name","number","id","type","types","payload","contactId","value","connect","dispatch","onSubmit","contact","contactsActions","useState","setName","setNumber","handleChange","event","target","e","preventDefault","uuidv4","className","styles","contact_form","input_name","pattern","title","onChange","required","button","state","contacts","filter","form","normalizedFilter","toLowerCase","includes","getVisibleContacts","items","onDeleteContact","contact_list","map","contact_item","onClick","App","combineReducers","rootReducer","contactsReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.801cf701.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"ContactForm_contact_form__2qj8b\",\"input_name\":\"ContactForm_input_name__JCTER\",\"button\":\"ContactForm_button__1007G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactsList_contact_list__252_C\",\"contact_item\":\"ContactsList_contact_item__sU5hE\",\"button\":\"ContactsList_button__2Uuuy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__30cdg\"};","// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  ADD: 'contacts/Add',\n  DELETE: 'contacts/Delete',\n  CHANGE_FILTER: 'contacts/ChangeFilter',\n};\n","import types from './contacts-types';\n\nconst addItem = ({ name, number, id }) => ({\n  type: types.ADD,\n  payload: {\n    name,\n    number,\n    id,\n  },\n});\n\nconst deleteItem = contactId => ({\n  type: types.DELETE,\n  payload: contactId,\n});\n\nconst changeFilter = value => ({\n  type: types.CHANGE_FILTER,\n  payload: value,\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addItem, deleteItem, changeFilter };\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport contactsActions from '../redux/FormInput/contacts-actions';\nimport { v4 as uuidv4 } from 'uuid';\nimport styles from './ContactForm.module.scss';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number, id: uuidv4() });\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.contact_form}>\n      <label>\n        <p className={styles.input_name}>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label>\n        <p className={styles.input_name}>Number</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value={number}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <button type=\"submit\" className={styles.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     id: '',\n//     name: '',\n//     number: '',\n//   };\n\n//   inputFormId = uuidv4();\n\n//   handleInputChangeEvent = event => {\n//     const { name, value } = event.currentTarget;\n\n//     this.setState({ [name]: value, id: uuidv4() });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit} className={styles.contact_form}>\n//         <label>\n//           <p className={styles.input_name}>Name</p>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             value={this.state.name}\n//             onChange={this.handleInputChangeEvent}\n//             required\n//           />\n//         </label>\n//         <label>\n//           <p className={styles.input_name}>Number</p>\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             value={this.state.number}\n//             onChange={this.handleInputChangeEvent}\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\" className={styles.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: contact => dispatch(contactsActions.addItem(contact)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport contactsActions from '../redux/FormInput/contacts-actions';\nimport styles from './Filter.module.scss';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <form className={styles.form}>\n      <label>\n        <p>Find contacts by name</p>\n        <input type=\"text\" value={value} onChange={onChange} />\n      </label>\n    </form>\n  );\n}\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styles from './ContactsList.module.scss';\nimport contactsActions from '../redux/FormInput/contacts-actions';\n\nfunction ContactsList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={styles.contact_list}>\n      {contacts.map(({ name, number, id }) => (\n        <li key={id} className={styles.contact_item}>\n          <span>\n            {name}: {number}\n          </span>\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className={styles.button}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nconst getVisibleContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = state => {\n  const { items, filter } = state.contacts;\n  const visibleContacts = getVisibleContacts(items, filter);\n\n  return {\n    contacts: visibleContacts,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsActions.deleteItem(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import {\n  // useState,\n  Fragment,\n} from 'react';\n\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactsList from './components/ContactsList';\n// import Notification from './components/Notification';\n\nexport default function App() {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // function contactsFromLocalStorage() {\n  //   return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n  // }\n\n  // const formSubmitHandler = data => {\n  //   contacts.find(({ name }) => name.toLowerCase() === data.name.toLowerCase())\n  //     ? alert(`${data.name} is already in contacts`)\n  //     : setContacts(prevState => [...[data], ...prevState]);\n  // };\n\n  return (\n    <Fragment>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {/* {contacts.length > 0 ? ( */}\n      <Fragment>\n        <Filter />\n        <ContactsList />\n      </Fragment>\n      {/* ) : (\n        <Notification message=\"Empty contacts list\" />\n      )} */}\n    </Fragment>\n  );\n}\n","import { combineReducers } from 'redux';\nimport types from './contacts-types';\n\nconst items = (state = [], { type, payload }) => {\n  switch (type) {\n    case types.ADD:\n      return [payload, ...state];\n\n    case types.DELETE:\n      return state.filter(contact => contact.id !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = '', { type, payload }) => {\n  switch (type) {\n    case types.CHANGE_FILTER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './FormInput/contacts-reducer';\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\n\nimport App from './App';\nimport store from './components/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}